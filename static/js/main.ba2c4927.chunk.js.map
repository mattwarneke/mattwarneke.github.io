{"version":3,"sources":["components/ListViewItem.js","components/JoJosAdventure.js","components/LabyrinthTD.js","components/Scoreboard.js","components/ScoreboardGraphql.js","App.js","components/Header.js","serviceWorker.js","index.js"],"names":["ListViewItem","className","this","props","heading","children","React","Component","JoJosAdventure","unityContent","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","state","progression","isLoading","on","setState","fullScreen","bind","setFullscreen","ContentBlurb","onClick","style","cursor","icon","faExpand","unityContext","LabyrinthTD","id","devicePixelRatio","gql","apolloClient","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","connectToDevTools","fetchOptions","mode","rightAlign","textAlign","float","ContentArray","name","ContentHeader","ComponentToRender","App","window","CurrentIndex","changeContent","indexOfContent","client","faCat","faTree","ID","faReact","faHtml5","faCss3Alt","faNodeJs","faCube","Header","Boolean","location","hostname","match","ReactDOM","render","paddingTop","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba2c4927.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../css/Home.css'\r\n\r\nclass ListViewItem extends React.Component {\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"row-900\">\r\n                <div className=\"HeadingRow\">\r\n                    <span className=\"ContainerHeading\">\r\n                        {this.props.heading}\r\n                    </span>\r\n                </div>\r\n\r\n                <div className=\"ContentContainer\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListViewItem;","import React from \"react\";\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExpand } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport class JoJosAdventure extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //this.unityContent = new UnityContent(\r\n        //    \"JoJosAdventure/Build/WebGL.json\",\r\n        //    \"JoJosAdventure/Build/UnityLoader.js\", {\r\n        //        adjustOnWindowResize: true\r\n        //    }\r\n        //);\r\n        this.unityContent = new UnityContext({\r\n          loaderUrl: \"JoJosAdventure/Build/UnityLoader.js\",\r\n          dataUrl: \"JoJosAdventure/Build/WebGL.data.unityweb\",\r\n          frameworkUrl: \"JoJosAdventure/Build/WebGL.wasm.framework.unityweb\",\r\n          codeUrl: \"JoJosAdventure/Build/WebGL.wasm.code.unityweb\",\r\n        });\r\n        this.state = {\r\n            progression: 0,\r\n            isLoading: true\r\n        }\r\n        this.unityContent.on(\"loaded\", () => {\r\n            this.setState({\r\n                isLoading: false\r\n            });\r\n        });\r\n        this.unityContent.on(\"progress\", progression => {\r\n            this.setState({\r\n                progression: progression\r\n            });\r\n        });\r\n        this.fullScreen = this.fullScreen.bind(this);\r\n    }\r\n\r\n    fullScreen() {\r\n        this.unityContent.setFullscreen(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.ContentBlurb}\r\n                <div>\r\n                    <div className=\"loadingFullScreen\">\r\n                    {\r\n                        this.state.isLoading === true\r\n                            ? \"Loading \" + this.state.progression * 100 + \" percent...\"\r\n                            : <span onClick={() => this.fullScreen()} style={{ cursor: \"pointer\" }}>\r\n                                <FontAwesomeIcon icon={faExpand} />  Fullscreen\r\n                              </span>\r\n                    }\r\n                    </div>\r\n                    <Unity unityContext={this.unityContent} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default JoJosAdventure;","import React from \"react\";\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExpand } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport class LabyrinthTD extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //this.unityContent = new UnityContent(\r\n        //   \"LabyrinthTD/Build/WebGL.json\",\r\n        //    \"LabyrinthTD/Build/UnityLoader.js\", {\r\n        //        devicePixelRatio: 1,\r\n        //        adjustOnWindowResize: true\r\n        //    }\r\n        //);\r\n        this.unityContent = new UnityContext({\r\n          loaderUrl: \"LabyrinthTD/Build/UnityLoader.js\",\r\n          dataUrl: \"LabyrinthTD/Build/WebGL.data.unityweb\",\r\n          frameworkUrl: \"LabyrinthTD/Build/WebGL.wasm.framework.unityweb\",\r\n          codeUrl: \"LabyrinthTD/Build/WebGL.wasm.code.unityweb\",\r\n        });\r\n\r\n        this.state = {\r\n            progression: 0,\r\n            isLoading: true\r\n        }\r\n        this.unityContent.on(\"loaded\", () => {\r\n            this.setState({\r\n                isLoading: false\r\n            });\r\n        });\r\n        this.unityContent.on(\"progress\", progression => {\r\n            this.setState({\r\n                progression: progression\r\n            });\r\n        });\r\n        this.fullScreen = this.fullScreen.bind(this);\r\n    }\r\n\r\n    fullScreen() {\r\n        this.unityContent.setFullscreen(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.ContentBlurb}\r\n                <div>\r\n                    <div className=\"loadingFullScreen\">\r\n                    {\r\n                        this.state.isLoading === true\r\n                            ? \"Loading \" + this.state.progression * 100 + \" percent...\"\r\n                            : <span onClick={() => this.fullScreen()} style={{ cursor: \"pointer\" }}>\r\n                                <FontAwesomeIcon icon={faExpand} />  Fullscreen\r\n                              </span>\r\n                    }\r\n                    </div>\r\n                    <Unity id=\"labTd\" unityContext={this.unityContent} devicePixelRatio={1} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n    \r\nexport default LabyrinthTD;","import React from 'react';\r\nimport './../css/ScoreBoard.css'\r\n\r\nclass ScoreBoard extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { scores: [] };\r\n    }\r\n    componentDidMount() {\r\n        fetch(`http://localhost:8085/scores/scoreobject/`)\r\n            .then(result => result.json())\r\n            .then(scores => this.setState({ scores }))\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <table>\r\n                    <caption>Top 10 Scores - LabyrinthTD</caption>\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"column\">Rank</th>\r\n                            <th scope=\"column\">Player</th>\r\n                            <th scope=\"column\">Level</th>\r\n                            <th scope=\"column\">Score</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        this.state.scores.length > 0\r\n                            ?\r\n                                this.state.scores.map((score) => (\r\n                                    <tr>\r\n                                        <td>1st</td>\r\n                                        <td>{score.User}</td>\r\n                                        <td>{score.Level}</td>\r\n                                        <td>{score.Score}</td>\r\n                                    </tr>\r\n                                ))\r\n                            :\r\n                                <tr>\r\n                                    <td>1st</td>\r\n                                    <td>...</td>\r\n                                    <td>...</td>\r\n                                    <td>...</td>\r\n                                </tr>\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ScoreBoard;","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\n\r\nimport './../css/ScoreBoard.css'\r\n\r\n\r\nexport default function ScoreboardGraphql() {\r\n  const { data, loading, error } = useQuery(scoresListQuery);\r\n  if (loading) return <p>LOADING...</p>;\r\n  if (error) return <p>ERROR</p>;\r\n\r\n  return (\r\n    <div>\r\n      <table>\r\n        <caption>Top 10 Scores - LabyrinthTD</caption>\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"column\">Rank</th>\r\n            <th scope=\"column\">Player</th>\r\n            <th scope=\"column\">Level</th>\r\n            <th scope=\"column\">Score</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            data.scores.map(score => (\r\n              <tr>\r\n                <td>1st</td>\r\n                <td>{score.user}</td>\r\n                <td>{score.level}</td>\r\n                <td>{score.score}</td>\r\n              </tr>\r\n            ))\r\n          }\r\n        </tbody>\r\n      </table>\r\n  </div>\r\n  );\r\n}\r\n\r\nconst scoresListQuery = gql`\r\nquery\r\n{\r\n  scores {\r\n    score\r\n    user\r\n    level\r\n    version\r\n  }\r\n}\r\n`;","import React from 'react';\r\nimport './App.css';\r\nimport ListViewItem from './components/ListViewItem';\r\nimport JoJosAdventure from './components/JoJosAdventure';\r\nimport LabyrinthTD from './components/LabyrinthTD';\r\nimport ScoreBoard from './components/Scoreboard';\r\nimport ScoreboardGraphql from './components/ScoreboardGraphql';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCat, faTree, faCube } from '@fortawesome/free-solid-svg-icons';\r\nimport { faReact, faHtml5, faCss3Alt, faNodeJs } from '@fortawesome/free-brands-svg-icons'\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\n\r\nconst apolloClient = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: new HttpLink({\r\n        uri: 'http://localhost:8085/graphql'\r\n    }),\r\n    connectToDevTools: true,\r\n    fetchOptions: {\r\n        mode: 'no-cors',\r\n    },\r\n});\r\n\r\nlet rightAlign =\r\n    {\r\n        textAlign: 'right',\r\n        float: 'right'\r\n    };\r\n\r\nlet ContentArray =\r\n[\r\n        {\r\n            name: \"JoJosAdventure\",\r\n            ContentHeader: \"JoJos Marvelous Adventure\",\r\n            ComponentToRender: <JoJosAdventure ContentBlurb=\r\n            {\r\n                <div>\r\n                    <p>As Jojo(cat) save Princess Paige from her trapped state!</p>\r\n                    <p>Click to move - JoJo will walk in a straight line to the clicked spot. Move her around obstacles.</p>\r\n                    <p>Pay attention to the prompts coming from Matt(me) to make it to Paige.</p>\r\n                </div>\r\n            } />\r\n        },\r\n\r\n        {\r\n            name: \"LabyrinthTD\",\r\n            ContentHeader: \"Labyrinth Tower Defense\",\r\n            ComponentToRender: <LabyrinthTD ContentBlurb=\r\n            {\r\n                <div>\r\n                    <p>Protect your sacred tree from the invaders!</p>\r\n                    <p>Drag the defenders from the bottom on to a square - the defenders will automatically shoot approaching enemies.</p>\r\n                    <p>Zoom the camera with the mousewheel, move the camera by holding left click and dragging</p>\r\n                    <p>Try to create a maze so the enemies must run as long as possible - see the dirt path for enemy path.</p>\r\n                </div>\r\n            }/>\r\n        }\r\n];\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const startIndex = 0;\r\n        window.devicePixelRatio = 1;\r\n        this.state = {\r\n            CurrentIndex: startIndex,\r\n            ComponentToRender: ContentArray[startIndex].ComponentToRender,\r\n            ContentHeader: ContentArray[startIndex].ContentHeader,\r\n            ContentBlurb: ContentArray[startIndex].ContentBlurb\r\n        }\r\n        this.changeContent = this.changeContent.bind(this);\r\n    }\r\n    changeContent(indexOfContent)\r\n    {\r\n        this.setState({\r\n            CurrentIndex: indexOfContent,\r\n            ComponentToRender: ContentArray[indexOfContent].ComponentToRender,\r\n            ContentHeader: ContentArray[indexOfContent].ContentHeader,\r\n            ContentBlurb: ContentArray[indexOfContent].ContentBlurb\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <ApolloProvider client={apolloClient}>\r\n\r\n                <ListViewItem heading=\"Navigation\">\r\n                    <div>\r\n                        <b>{ContentArray[0].ContentHeader}</b>\r\n                        <span style={rightAlign}>\r\n                        {\r\n                            this.state.CurrentIndex !== 0 &&\r\n                            <button onClick={() => this.changeContent(0)}>\r\n                                <FontAwesomeIcon icon={faCat} /> Play Game\r\n                            </button>\r\n                        }\r\n                        </span>\r\n                    </div>\r\n                    <p>Unity 2D Game built with C#</p>\r\n                    \r\n                    <div><br /></div>\r\n                    <div>\r\n                        <b>{ContentArray[1].ContentHeader}</b>\r\n                        <span style={rightAlign}>\r\n                        {\r\n                            this.state.CurrentIndex !== 1 &&\r\n                            <button onClick={() => this.changeContent(1)}>\r\n                                <FontAwesomeIcon icon={faTree} /> Play Game\r\n                            </button>\r\n                        }\r\n                        </span>\r\n                    </div>\r\n                    <div>Unity 2D Game built with C#</div>\r\n                    <div>WebGL, also available on android (closed beta)</div>\r\n                </ListViewItem>\r\n\r\n                <ListViewItem ID=\"mainContent\" heading={this.state.ContentHeader}>\r\n                    {this.state.ComponentToRender}\r\n                </ListViewItem>\r\n\r\n                <ListViewItem ID=\"scoreboard\" heading=\"Games Scoreboard\">\r\n                    {/*<ScoreBoard /> <ScoreboardGraphql /> */}\r\n                    \r\n                </ListViewItem>\r\n\r\n                <ListViewItem heading=\"About\">\r\n                    <div className=\"flex-container\">\r\n                        <span style={{ textAlign: \"center\" }}>\r\n                            <div>\r\n                                <FontAwesomeIcon icon={faReact} className=\"big-icon\" />\r\n                            </div>\r\n                            ReactJS\r\n                        </span>\r\n                        <span style={{ textAlign: \"center\" }}>\r\n                            <div>\r\n                                <FontAwesomeIcon icon={faHtml5} className=\"big-icon\" />\r\n                            </div>\r\n                            HTML5\r\n                        </span>\r\n                        <span style={{ textAlign: \"center\" }}>\r\n                            <div>\r\n                                <FontAwesomeIcon icon={faCss3Alt} className=\"big-icon\" />\r\n                            </div>\r\n                            CSS3\r\n                        </span>\r\n                        <span style={{ textAlign: \"center\" }}>\r\n                            <div>\r\n                                <FontAwesomeIcon icon={faNodeJs} className=\"big-icon\" />\r\n                            </div>\r\n                            JavaScript ES6\r\n                        </span>\r\n                        <span style={{ textAlign: \"center\" }}>\r\n                            <div>\r\n                                <FontAwesomeIcon icon={faCube} className=\"big-icon\" />\r\n                            </div>\r\n                            Unity\r\n                        </span>\r\n                    </div>\r\n                </ListViewItem>\r\n\r\n            </ApolloProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './../css/Home.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faReact } from '@fortawesome/free-brands-svg-icons'\r\n\r\nclass Header extends React.Component {\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <header>\r\n                <div className=\"headerMenuItem\">\r\n                    <FontAwesomeIcon icon={faReact} className=\"icon-header\" />\r\n                </div>\r\n                <div className=\"headerText\">\r\n                    Matt Warneke\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Header from './components/Header'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlet spaceForHeaderStyle =\r\n    {\r\n        paddingTop: '5em'\r\n    };\r\n\r\nReactDOM.render(\r\n    <div>\r\n        <Header />\r\n        <div id=\"ListViewContainer\" style={spaceForHeaderStyle}>\r\n            <App />\r\n        </div>\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}