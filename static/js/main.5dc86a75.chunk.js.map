{"version":3,"sources":["components/ListViewItem.js","components/JoJosAdventure.js","components/LabyrinthTD.js","App.js","components/Header.js","serviceWorker.js","index.js"],"names":["ListViewItem","react_default","a","createElement","className","this","props","heading","children","React","Component","JoJosAdventure","_React$Component","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","unityContent","UnityContent","adjustOnWindowResize","state","progression","isLoading","score","on","setState","inherits","createClass","key","value","Exports_default","LabyrinthTD","style","width","height","marginLeft","marginRight","paddingBottom","id","rightAlign","textAlign","float","ContentArray","name","ComponentToRender","components_JoJosAdventure","ContentHeader","ContentBlurb","components_LabyrinthTD","App","CurrentIndex","changeContent","bind","assertThisInitialized","indexOfContent","_this2","Fragment","components_ListViewItem","onClick","ID","Header","index_es","icon","faReact","Boolean","window","location","hostname","match","ReactDOM","render","components_Header","paddingTop","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dc86a75.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../css/Home.css'\r\n\r\nclass ListViewItem extends React.Component {\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"row-900\">\r\n                <div className=\"HeadingRow\">\r\n                    <span className=\"ContainerHeading\">\r\n                        {this.props.heading}\r\n                    </span>\r\n                </div>\r\n\r\n                <div className=\"ContentContainer\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListViewItem;","import React from \"react\";\r\nimport Unity, { UnityContent } from \"react-unity-webgl\";\r\n\r\nexport class JoJosAdventure extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.unityContent = new UnityContent(\r\n            \"JoJosAdventure/Build/WebGL.json\",\r\n            \"JoJosAdventure/Build/UnityLoader.js\", {\r\n                adjustOnWindowResize: true\r\n            }\r\n        );\r\n        this.state = {\r\n            progression: 0,\r\n            isLoading: true,\r\n            score: 0\r\n        }\r\n        this.unityContent.on(\"loaded\", () => {\r\n            this.setState({\r\n                isLoading: false\r\n            });\r\n        });\r\n        this.unityContent.on(\"progress\", progression => {\r\n            this.setState({\r\n                progression: progression\r\n            });\r\n        });\r\n        //unityContent.on(\"ScoreUpdate\", score => {\r\n        //    this.setState({\r\n        //        score: score\r\n        //    });\r\n        //});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div> {\r\n                    this.state.isLoading === true\r\n                        ? \"Loading \" + this.state.progression * 100 + \" percent...\"\r\n                        : 'Loaded, enjoy!'\r\n                }\r\n                </div>\r\n                <Unity unityContent={this.unityContent} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default JoJosAdventure;","import React from \"react\";\r\nimport Unity, { UnityContent } from \"react-unity-webgl\";\r\n\r\nexport class LabyrinthTD extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.unityContent = new UnityContent(\r\n            \"LabyrinthTD/Build/WebGL.json\",\r\n            \"LabyrinthTD/Build/UnityLoader.js\", {\r\n                adjustOnWindowResize: true\r\n            }\r\n        );\r\n        this.state = {\r\n            progression: 0,\r\n            isLoading: true\r\n        }\r\n        this.unityContent.on(\"loaded\", () => {\r\n            this.setState({\r\n                isLoading: false\r\n            });\r\n        });\r\n        this.unityContent.on(\"progress\", progression => {\r\n            this.setState({\r\n                progression: progression\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ width: \"75%\",  height: \"640px\", marginLeft: \"auto\", marginRight: \"auto\", paddingBottom: \"30px\" }}>\r\n                <div> {\r\n                    this.state.isLoading === true\r\n                        ? \"Loading \" + this.state.progression * 100 + \" percent...\"\r\n                        : 'Loaded, enjoy!'\r\n                    }\r\n                </div>\r\n                <Unity id=\"labTd\" unityContent={this.unityContent} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n    \r\nexport default LabyrinthTD;","import React from 'react';\r\nimport './App.css';\r\nimport ListViewItem from './components/ListViewItem';\r\nimport JoJosAdventure from './components/JoJosAdventure';\r\nimport LabyrinthTD from './components/LabyrinthTD';\r\n\r\nlet rightAlign =\r\n    {\r\n        textAlign: 'right',\r\n        float: 'right'\r\n    };\r\n\r\nlet ContentArray =\r\n[\r\n        {\r\n            name: \"JoJosAdventure\",\r\n            ComponentToRender: <JoJosAdventure />,\r\n            ContentHeader: \"JoJos Marvelous Adventure\",\r\n            ContentBlurb:\r\n                <div>\r\n                    <p>As Jojo(cat) save Princess Paige from her trapped state!</p>\r\n                    <p>Click to move - JoJo will walk in a straight line to the clicked spot. Move her around obstacles.</p>\r\n                    <p>Pay attention to the prompts coming from Matt(me) to make it to Paige.</p>\r\n                </div>\r\n        },\r\n\r\n        {\r\n            name: \"LabyrinthTD\",\r\n            ComponentToRender: <LabyrinthTD />,\r\n            ContentHeader: \"Labyrinth TD\",\r\n            ContentBlurb:\r\n                <div>\r\n                    <p>Protect your sacred tree from the invaders!</p>\r\n                    <p>Choose a level and start, drag the defenders from the bottom on to a square - the defenders will automatically shoot approaching enemies.</p>\r\n                    <p>Zoom the camera with the mousewheel, move the camera by holding left click and dragging</p>\r\n                    <p>Try to create a maze so the enemies must run as long as possible - see the dirt path for enemy path. The path is recalculated when placing a defender.</p>\r\n                </div>\r\n        }\r\n];\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const startIndex = 0;\r\n        this.state = {\r\n            CurrentIndex: startIndex,\r\n            ComponentToRender: ContentArray[startIndex].ComponentToRender,\r\n            ContentHeader: ContentArray[startIndex].ContentHeader,\r\n            ContentBlurb: ContentArray[startIndex].ContentBlurb\r\n        }\r\n        this.changeContent = this.changeContent.bind(this);\r\n    }\r\n    changeContent(indexOfContent)\r\n    {\r\n        this.setState({\r\n            CurrentIndex: indexOfContent,\r\n            ComponentToRender: ContentArray[indexOfContent].ComponentToRender,\r\n            ContentHeader: ContentArray[indexOfContent].ContentHeader,\r\n            ContentBlurb: ContentArray[indexOfContent].ContentBlurb\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <ListViewItem heading=\"Navigation\">\r\n                    <div><b>{ContentArray[0].ContentHeader}</b> <span style={rightAlign}>February 2019 - present</span></div>\r\n                    <p>Unity 2D Game built with C#</p>\r\n                    {\r\n                        this.state.CurrentIndex !== 0\r\n                        && <button onClick={() => this.changeContent(0)}>Load Game</button>\r\n                    }\r\n                    <div><br /></div>\r\n                    <div><b>{ContentArray[1].ContentHeader}</b> <span style={rightAlign}>January 2017 - present</span></div>\r\n                    <div>Unity 2D Game built with C#</div>\r\n                    <div>WebGL, also available on android (closed beta)</div>\r\n                    {\r\n                        this.state.CurrentIndex !== 1\r\n                        && <button onClick={() => this.changeContent(1)}>Load Game</button>\r\n                    }\r\n                </ListViewItem>\r\n                <ListViewItem ID=\"mainContent\" heading={this.state.ContentHeader}>\r\n                    {this.state.ContentBlurb}\r\n                    {this.state.ComponentToRender}\r\n                </ListViewItem>\r\n                <ListViewItem heading=\"About\">\r\n                    Single page application built with ReactJS, ES6, HTML5 and CSS3\r\n                </ListViewItem>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport './../css/Home.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee } from '@fortawesome/free-solid-svg-icons'\nimport { faReact } from '@fortawesome/free-brands-svg-icons'\n\nclass Header extends React.Component {\n    \n    render() {\n        \n        return (\n            <header>\r\n                <div className=\"headerMenuItem\">\r\n                    <FontAwesomeIcon icon={faReact} className=\"icon-header\" />\r\n                </div>\r\n                <div className=\"headerText\">\r\n                    Matt Warneke\r\n                </div>\r\n            </header>\n        );\n    }\r\n}\n\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Header from './components/Header'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlet spaceForHeaderStyle =\r\n    {\r\n        paddingTop: '5em'\r\n    };\r\n\r\nReactDOM.render(\r\n    <div>\r\n        <Header />\r\n        <div id=\"ListViewContainer\" style={spaceForHeaderStyle}>\r\n            <App />\r\n        </div>\r\n    </div>\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}